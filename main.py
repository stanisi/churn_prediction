import pandas as pd
import matplotlib.pyplot as plt
import xgboost as xgb
from utils import train_classifier, features_to_prediction

backfill = pd.read_csv('data.csv')

target_name = 'IS_CHURN'
feature_names = [
    'PLATFORM_GP', 'PLATFORM_IOS', 'INSTALL_HR', 'INSTALL_DOW',
       'COUNTRY_US', 'COUNTRY_CA', 'COUNTRY_CN', 'COUNTRY_ID',
       'COUNTRY_BR', 'COUNTRY_KR', 'COUNTRY_JP', 'COUNTRY_RU',
       'COUNTRY_DE', 'COUNTRY_FR', 'COUNTRY_GB', 'COUNTRY_AT',
       'COUNTRY_IT', 'COUNTRY_ES', 'COUNTRY_VN', 'COUNTRY_IN',
       'COUNTRY_TR', 'COUNTRY_MX', 'COUNTRY_TH', 'COUNTRY_UA',
       'COUNTRY_PH', 'COUNTRY_MY', 'COUNTRY_EG', 'DEVICE_IPHONE',
       'DEVICE_IPHONE_LAST', 'DEVICE_IPAD', 'DEVICE_IPAD_LAST',
       'DEVICE_SAMSUNG', 'MIN_GAP_INSTALL_TS', 'MAX_GAP_INSTALL_TS',
       'MAX_TIME_SPENT', 'SUM_TIME_SPENT', 'TIME_SPENT_1ST',
       'TIME_SPENT_LAST', 'TIME_SPENT_2NDLAST', 'MAX_BTW_SESS',
       'SUM_BTW_SESS', 'BTW_SESS_1ST', 'BTW_SESS_LAST',
       'BTW_SESS_2NDLAST', 'TOTAL_RESUMES', 'TOTAL_LAUNCHS',
       'TOTAL_FIRST_LAUNCHS', 'TOTAL_CRASH', 'CNT_LAUNCHES',
       'CNT_LAUNCHES_T900', 'CNT_LAUNCHES_T600', 'CNT_LAUNCHES_T300',
       'CNT_LAUNCHES_T60', 'CNT_LAUNCHES_T180',
       'CNT_TIME_BETWEEN_SESSIONS_T240', 'CNT_TIME_BETWEEN_SESSIONS_T480',
       'CNT_TIME_BETWEEN_SESSIONS_T720',
       'CNT_TIME_BETWEEN_SESSIONS_T1440', 'ACTIVE_DOW', 'MAX_NB_SESSIONS',
       'SUM_NB_SESSIONS', 'NB_SESSIONS_LAST', 'NB_SESSIONS_1ST',
       'MAX_ACT_TIME_SPENT', 'SUM_ACT_TIME_SPENT', 'IS_ACT_CC_SAME',
       'IS_PAU_TO_DATE', 'REV_TO_DATE', 'MAX_REV_TODAY', 'TRANS_TO_DATE',
       'MAX_TRANS_TODAY', 'CNT_ACT_PLATFORM', 'CNT_ACT_RECORDS',
       'IS_ACTIVE_N_1', 'IS_ACTIVE_N_2', 'IS_ACTIVE_N_3',
       'IS_ACTIVE_N_4', 'IS_ACTIVE_N_5', 'IS_ACTIVE_N_6', 'IS_ACTIVE_N_7',
       'TIME_SPENT_D7', 'TIME_SPENT_D6', 'TIME_SPENT_D5', 'TIME_SPENT_D4',
       'TIME_SPENT_D3', 'TIME_SPENT_D2', 'TIME_SPENT_D1',
       'NB_SESSIONS_D7', 'NB_SESSIONS_D6', 'NB_SESSIONS_D5',
       'NB_SESSIONS_D4', 'NB_SESSIONS_D3', 'NB_SESSIONS_D2',
       'NB_SESSIONS_D1', 'MIN_PROGRESS_INDEX01', 'MEAN_PROGRESS_INDEX01',
       'MAX_PROGRESS_INDEX01', 'LAST_PROGRESS_INDEX01',
       'MIN_PROGRESS_INDEX02', 'MEAN_PROGRESS_INDEX02',
       'MAX_PROGRESS_INDEX02', 'LAST_PROGRESS_INDEX02',
       'MIN_PROGRESS_INDEX03', 'MEAN_PROGRESS_INDEX03',
       'MAX_PROGRESS_INDEX03', 'LAST_PROGRESS_INDEX03',
       'MIN_GOLD_BALANCE', 'MEAN_GOLD_BALANCE', 'MAX_GOLD_BALANCE',
       'LAST_GOLD_BALANCE', 'MIN_FOOD_BALANCE', 'MEAN_FOOD_BALANCE',
       'MAX_FOOD_BALANCE', 'LAST_FOOD_BALANCE', 'MIN_WOOD_BALANCE',
       'MEAN_WOOD_BALANCE', 'MAX_WOOD_BALANCE', 'LAST_WOOD_BALANCE',
       'MIN_STONE_BALANCE', 'MEAN_STONE_BALANCE', 'MAX_STONE_BALANCE',
       'LAST_STONE_BALANCE', 'MIN_IRON_BALANCE', 'MEAN_IRON_BALANCE',
       'MAX_IRON_BALANCE', 'LAST_IRON_BALANCE', 'MIN_SILVER_BALANCE',
       'MEAN_SILVER_BALANCE', 'MAX_SILVER_BALANCE', 'LAST_SILVER_BALANCE',
       'MIN_DUCATS_BALANCE', 'MEAN_DUCATS_BALANCE', 'MAX_DUCATS_BALANCE',
       'LAST_DUCATS_BALANCE', 'AVG_INACTIVE_1W', 'MED_INACTIVE_1W',
       'MAX_INACTIVE_1W', 'DOW'
]



def main() -> None:

    classifier = train_classifier(df = backfill, feature_names = feature_names, target_name=target_name)
    xgb.plot_importance(classifier, max_num_features=20)
    # plt.legend()
    # plt.rcParams["figure.figsize"] = (10, 8)
    plt.show()
    # print(classifier)
    # preds, preds_min = features_to_prediction()

if __name__ == '__main__':
    main()